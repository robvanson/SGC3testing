<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="xhtml-default.css" type="text/css" media="screen, aural, print" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN"
    "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Language" content="en" />
<title lang="en" xml:lang="en" dir="ltr">SpeakGoodChinese</title>
<style>
body {
	background-image: url("Background.png");
	background-color: rgb(250,250,250);
    background-repeat: no-repeat;
    background-position: center center;
    background-attachment: fixed;}
h1 {
	text-align: center;
	}
button {
		position:absolute;
		width:10%;
		height:15%;
		cursor:pointer; /*forces the cursor to change to a hand when the button is hovered*/
		text-align:center;
		font: bold x-large "Helvetica";
		background-color: rgb(220,220,220);
		
		-webkit-box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		-moz-box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		
		/*give the corners a small curve*/
		-moz-border-radius: 7px;
		-webkit-border-radius: 7px;
		border-radius: 7px;
		}
	
</style>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
<script src="https://cdn.webrtc-experiment.com/RecordRTC.js"><p>No Audio</p></script>   
<script src="mespeak/mespeak.full.js"><p>No TTS</p></script>   
<script src="wordlists.js"><p>No wordlists</p></script>   
</head>
<body>
	<div style="color: gray; position: fixed; top: 5%; left: 5%; font-size: 600%" id="RecordingLight">&#9679;</div>
	<p><audio id='Audio' controls="false" hidden="true" ></audio></p>
	
	<div style="color: black; position: fixed; top: 65%; left: 5%; width: 90%; font-size: 250%; text-align: center; " id="DisplayString" align="center">---</div>
	<div style="color: blue; position: fixed; bottom: 21%; left: 35%; width: 30%; font-size: 150%; text-align: center; " id="WordlistString" align="center">---</div>
	
	<button type="button" style="color: gray; bottom: 5%; left: 34%" id="RecordButton" disabled="true" ><div style="font-size: 100%; ">&#9679;<br />Record</div></button>
	<button type="button" style="color: gray; bottom: 5%; left: 45%" id="PlayButton" disabled="true" ><div style="font-size: 100%">&#9658;<br />Play</div></button>
	<button type="button" style="color: black; bottom: 5%; left: 56%" id="ExampleButton" ><div style="font-size: 100%">&#9658;<br />Example</div></button>
	<button type="button" style="color: black; bottom: 5%; left: 68%" id="PreviousButton" ><div style="font-size: 100%">&lt;<br />Previous</div></button>
	<button type="button" style="color: black; bottom: 5%; left: 79%" id="NextButton" ><div style="font-size: 100%">&gt;<br />Next</div></button>
	<button type="button" style="color: black; bottom: 66%; right: 5%" id="PreviousWordlist" ><div style="font-size: 100%">&#94;<br />Previous</div></button>
	<button type="button" style="color: black; bottom: 50%; right: 5%" id="NextWordlist" ><div style="font-size: 100%">Next<br />V</div></button>

    <script>
	// Global settings
	var recSecs = 4;
	var ttsSpeed = 110;
	var ttsVariant = "f3";
	var shuffleLists = false;

	// Replace contents of displayed string
	var write_CurrentString = function () {
		//<![CDATA[
		if( currentWord >= 0 && currentWord < currentWordlist.length ) {
			currentItem = currentWordlist[currentWord];
			currentPinyin = currentItem[0];
			currentString = currentItem[0] + " " + currentItem[1] + " " + currentItem[2];
		} else {
			if(shuffleLists) currentWordlist.shuffle();
			currentPinyin = "";
			currentString = "---";
		};
		var displayString = document.getElementById('DisplayString');
		displayString.removeChild(displayString.firstChild);
		displayString.appendChild(document.createTextNode(currentString));
		//]]>
	};
	
	var write_WordlistName = function () {
		var displayString = document.getElementById('WordlistString');
		displayString.removeChild(displayString.firstChild);
		displayString.appendChild(document.createTextNode(wordlistName));
	};
	
	var wordlistName = "20 basic tone combinations";
	get_wordlist (wordlistName);
	if(shuffleLists) ListscurrentWordlist.shuffle();
	var currentWord = 0;
	var currentItem = currentWordlist[currentWord];
	var currentPinyin = currentItem[0];
	var currentString = currentItem[0] + " " + currentItem[1] + " " + currentItem[2];
	write_CurrentString ();
	write_WordlistName();
	
	// Set parameters
	var recordingLight = document.getElementById('RecordingLight');
	var record = document.getElementById('RecordButton');
	var play = document.getElementById('PlayButton');
	var example = document.getElementById('ExampleButton');
	var previous = document.getElementById('PreviousButton');
	var next = document.getElementById('NextButton');
	var prevWordlist = document.getElementById('PreviousWordlist');
	var nextWordlist = document.getElementById('NextWordlist');
	var mediaElement = document.getElementById('Audio');
	var stopRecording, playSound;
	
	
	// Other parameters
	var mediaStream;
	var mediaConstraints = { audio: true, video: false };
	var errorCallback = function(err){console.log("Error: " + err.name);};
	
	// Play example 
	example.onclick = function() {
		meSpeak.loadConfig("mespeak/mespeak_config.json"); 
		meSpeak.loadVoice('mespeak/voices/zh.json'); 
		meSpeak.speak(currentPinyin, {speed: ttsSpeed, variant: ttsVariant}); 		
	};

	// Previous word 
	previous.onclick = function() {
		//<![CDATA[
		--currentWord;
 		if( currentWord < 0 ) {
			currentWord = currentWordlist.length;
			
		};
		write_CurrentString();
		//]]>
	};

	// Next word 
	next.onclick = function() {
		//<![CDATA[
		++currentWord;		
		if(currentWord > currentWordlist.length) {
			currentWord = 0;
		};
		write_CurrentString();
		//]]>		 		
	};

	// Previous wordlist
	prevWordlist.onclick = function() {
		//<![CDATA[
		--wordlistNumber;
 		if( wordlistNumber < 0 ) {
			wordlistNumber = wordlists.length - 1;
		};
		wordlistName = wordlists[wordlistNumber][0];
		get_wordlist (wordlistName);
		if(shuffleLists) currentWordlist.shuffle();
		currentWord = 0;
		
		write_WordlistName(wordlistName);
		write_CurrentString();
		//]]>
	};

	// Next wordlist
	nextWordlist.onclick = function() {
		//<![CDATA[
		++wordlistNumber;
 		if( wordlistNumber >= wordlists.length ) {
			wordlistNumber = 0;
		};
		wordlistName = wordlists[wordlistNumber][0];
		get_wordlist (wordlistName);
		if(shuffleLists) currentWordlist.shuffle();
		currentWord = 0;
		
		write_WordlistName(wordlistName);
		write_CurrentString();
		//]]>		 		
	};
	var successCallback = function(mediaStream){
		
		if(!mediaStream){ 
			console.log("No media stream: " + mediaStream);
		}
		
	    record.disabled = false;
	    record.style.color = "red";
		
		var recordRTC = RecordRTC(mediaStream, {
			recorderType: StereoAudioRecorder // optionally force WebAudio API to record audio
		}); 
		
		
		
		// Play recorded sound
		play.onclick = function() {
			mediaElement.play();
		};
		
		// Stop
		stopRecording = function() {
			recordRTC.stopRecording(function(audioURL) { 
				mediaElement.src = audioURL;
			});
		    play.disabled = false;
		    record.disabled = false;
		    record.style.color = "red";
		    play.style.color = "red";
		    recordingLight.style.color = "gray";
		}
		
		// onClick Start
		record.onclick = function() {
			recordRTC.startRecording();
		    play.disabled = true;
		    record.disabled = true;
		    record.style.color = "gray";
		    play.style.color = "gray";
		    recordingLight.style.color = "red";
		    
		    // Set Timeout for stop
		    setTimeout(stopRecording, recSecs * 1000)
		}
	
	};
	
	navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);

	</script>
</body>
</html>
