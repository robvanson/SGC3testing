<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="xhtml-default.css" type="text/css" media="screen, aural, print" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN"
    "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" manifest="SpeakGoodChinese3.appcache">
<head>
<link rel="shortcut icon" href="sgc.png" />
<link rel="manifest" href="manifest.json" />
<link rel="icon" sizes="192x192" href="sgc.png" />
<meta name="viewport" content="width=device-width" />
<meta name="mobile-web-app-capable" content="yes" />
<meta http-equiv="Content-Language" content="en" />
<title lang="en" xml:lang="en" dir="ltr">SpeakGoodChinese 3</title>
<style>
body {
	background-image: url("Background.png");
	background-color: rgb(250,250,250);
    background-repeat: no-repeat;
    background-position: center center;
    background-attachment: fixed;}
h1 {
	text-align: center;
	}
button {
		position: fixed;
		overflow: hidden;
		text-overflow: clip clip;
		width:17%;
		height:15%;
		cursor:pointer; /*forces the cursor to change to a hand when the button is hovered*/
		text-align:center;
		font: bold 4vmin "Helvetica";
		background-color: rgb(220,220,220);
		text-overflow: clip;
		
		-webkit-box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		-moz-box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		
		/*give the corners a small curve*/
		-moz-border-radius: 7px;
		-webkit-border-radius: 7px;
		border-radius: 7px;
		}

</style>

<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />

<script type="text/javascript" src="wordlists.js" ></script>   
<script type="text/javascript" src="wordlists_plus.js" ></script>   
<script type="text/javascript" src="internationalization_tables.js" ></script>   
<script type="text/javascript" src="audioProcessing.js" ></script>   
<script type="text/javascript" src="toneprot.js" ></script>   
<script type="text/javascript" src="https://cdn.webrtc-experiment.com/RecordRTC.js" defer="true" ></script>   
<script type="text/javascript" src="mespeak/mespeak.full.js" defer="true" ></script>
<script type="text/javascript" src="fft.js/lib/real.js" defer="true" ></script>
<script type="text/javascript" src="fft.js/lib/complex.js" defer="true" ></script>
<script type="text/javascript" src="pitch.js/pitch.js" defer="true" ></script>
</head>

<body onload="if(window.speechSynthesis)window.speechSynthesis.getVoices();" onfocus="load_SGC3_settings ();" onblur="store_SGC3_settings ();" onunload="if(settingsWindow)settingsWindow.close(); " >
<!--
SpeakGoodChinese 3
Copyright (C) 2016 R.J.J.H. van Son (r.j.j.h.vanson@gmail.com)

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You can find a copy of the GNU General Public License at
http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
-->
	<div style="color: gray; position: fixed; top: 5%; left: 5%; font-size: 15vmin" id="RecordingLight">&#9679;</div>
	<p><audio id='ExampleAudio' controls="false" hidden="true" ></audio></p>
	<canvas id="TonePlot" width="1000" height="1000" style="position: fixed; top: 5%; left: 22.5%; width: 55%; height: 55%; "></canvas> 	
	
	<div style="color: black; position: fixed; top: 65%; left: 5%; width: 90%; font-size: 6vmin; text-align: center; " id="DisplayString" align="center" >
		<span id="Pinyin">-</span>&#8195;<span id="Character">-</span>&#8195;<span id="Translation" style="font-style: italic;">-</span></div>
	<div style="color: blue; position: fixed; bottom: 18%; left: 5%; width: 90%; font-size: 3vmin; text-align: center; text-overflow: clip; " id="WordlistString" align="center">---</div>
	
	<canvas id="LeftProgress" width="1000" height="2" style="position: fixed; bottom: 18%; left: 6%; width: 15%; height: 4px; "></canvas>
	<button type="button" style="color: black; bottom: 2%; left: 5%" id="PreviousButton" ><span style="font-size: 100%">|&#9664;<br /><span id="Previous" >Previous</span></span></button>
	<button type="button" style="color: gray; bottom: 2%; left: 23%" id="RecordButton" disabled="true" ><span style="font-size: 100%; ">&#9679;<br /><span id="Record" >Record</span></span></button>
	<button type="button" style="color: gray; bottom: 2%; left: 41%" id="PlayButton" disabled="true" ><span style="font-size: 100%">&#9658;<br /><span id="Play" >Play</span></span></button>
	<button type="button" style="color: black; bottom: 2%; left: 59%" id="ExampleButton" ><span style="font-size: 100%">&#9658;<br /><span id="Example" >Example</span></span></button>
	<canvas id="RightProgress" width="1000" height="2" style="position: fixed; bottom: 18%; left: 78%; width: 15%; height: 4px; "></canvas>
	<button type="button" style="color: black; bottom: 2%; left: 77%; " id="NextButton" ><span style="font-size: 100%">&#9654;|<br /><span id="Next" >Next</span></span></button>

	<button type="button" style="color: black; bottom: 84%; right: 2%; height: 10%" id="Settings" ><span style="font-size: 100%">&#8594; <span id="Config" >Settings</span></span></button>

	<!-- Wordlists -->
	<button type="button" style="color: black; bottom: 71%; right: 2%; height: 10%" id="PreviousWordlist" ><span style="font-size: 100%"><span id="WordlistUp" >Previous</span> &#8593;</span></button>
	<button type="button" style="color: black; bottom: 50%; right: 2%; height: 10%" id="NextWordlist" ><span style="font-size: 100%"> <span id="WordlistDown" title="" >Next</span> &#8595;</span></button>
	<select id="SelectWordList" style="position: fixed; color: black; bottom: 61%; right: 2%; height: 8%; width: 17%; font: 3vmin 'Helvetica'; background-color: rgb(220,220,220); "  >
		<option value="---" ><span id="WordlistCaption" title="" >Word List</span></option>
	</select> 

	<select id="Register" style="position: fixed; color: black; bottom: 39%; right: 2%; height: 8%; width: 17%; font: 3.5vmin 'Helvetica'; background-color: rgb(220,220,220); " onchange="sgc3_settings.register = getRegister();" >
		<option value="---" ><span id="RegisterCaption" title="" >---</span></option>
	</select> 

	<select id="Language" style="position: fixed; color: black; bottom: 28%; right: 2%; height: 8%; width: 17%; font: 3.5vmin 'Helvetica'; background-color: rgb(220,220,220); " onchange="sgc3_settings.language = change_mainpageLanguage(); " >
		<option value="---" ><span id="LanguageCaption" title="" >---</span></option>
	</select> 

    <script type="text/javascript">
	//<![CDATA[
	// Set DOM parameters
	var settingsWindow;
	var recordingLight = document.getElementById('RecordingLight');
	var tonePlotArea = document.getElementById('TonePlot');
	var record = document.getElementById('RecordButton');
	var play = document.getElementById('PlayButton');
	var example = document.getElementById('ExampleButton');
	var previous = document.getElementById('PreviousButton');
	var next = document.getElementById('NextButton');
	var prevWordlist = document.getElementById('PreviousWordlist');
	var nextWordlist = document.getElementById('NextWordlist');
	var selectWordlist = document.getElementById('SelectWordList');
	var exampleElement = document.getElementById('ExampleAudio');
	var settingsButton = document.getElementById('Settings');
	var stopRecording, playSound;
	var exampleURL = "-";
	var voiceZH_CN = -1;
	var clearRecordedData = function () { };
	
	// Handle keypresses
	function keyPress (e) {
		var key = e.key ? e.key : e.code;
		if (key == "ArrowRight") {
			next.onclick()
		} else if (key == ">" || key == ".") {
			next.onclick()
		} else if (key == "ArrowLeft") {
			previous.onclick()
		} else if (key == "<" || key == ",") {
			previous.onclick()
		} else if (key == "ArrowUp") {
			prevWordlist.onclick()
		} else if (key == "ArrowDown") {
			nextWordlist.onclick()
		} else if (key == "Tab") {
			play.onclick()
		} else if (key == "Enter") {
			record.onclick()
		} else if (key == " " || key == "Space") {
			example.onclick()
		}  else {
		};
	};
	window.onkeydown = keyPress;
	
	// Swipes with mouse or touch
	// Adde touch events
	tonePlotArea.addEventListener("touchstart", mouseDown, false);
	tonePlotArea.addEventListener("touchend", mouseUp, false);
	// Parameters
	var verticalThreshold = tonePlotArea.height / 20;
	var horizontalThreshold = tonePlotArea.width / 20;
	var mouseDownCoordinates = {x: -1, y: -1};
	var mouseUpCoordinates = {x: -1, y: -1};
	// Mouse down or touch start
	function mouseDown (e) {
		if (e.touches) e.preventDefault();
		mouseDownCoordinates.x = e.touches ? e.touches[0].clientX : e.clientX;
		mouseDownCoordinates.y = e.touches ? e.touches[0].clientY : e.clientY;
		mouseUpCoordinates.x = -1;
		mouseUpCoordinates.y = -1;
	};
	// Mouse up or touch end
	function mouseUp (e) {
		mouseUpCoordinates.x = e.touches ? e.touches[e.touches.length - 1].clientX : e.clientX;
		mouseUpCoordinates.y = e.touches ? e.touches[e.touches.length - 1].clientY : e.clientY;
		
		if (mouseDownCoordinates.x > -1 && mouseDownCoordinates.y > -1) {
			// Horizontal
			if (Math.abs(mouseUpCoordinates.y - mouseDownCoordinates.y) < verticalThreshold) {
				// To the left
				if(mouseUpCoordinates.x - mouseDownCoordinates.x < -horizontalThreshold) {
					next.onclick();
				// To the right
				} else if(mouseUpCoordinates.x - mouseDownCoordinates.x > horizontalThreshold) {
					previous.onclick();
				};
			} else if (Math.abs(mouseUpCoordinates.x - mouseDownCoordinates.x) < horizontalThreshold) {
			// Vertical
				// Up
				if(mouseUpCoordinates.y - mouseDownCoordinates.y < -verticalThreshold) {
					nextWordlist.onclick();
				// Down
				} else if(mouseUpCoordinates.y - mouseDownCoordinates.y > verticalThreshold) {
					prevWordlist.onclick();
				};
			};
		};

		mouseDownCoordinates.x = -1;
		mouseDownCoordinates.y = -1;
		mouseUpCoordinates.x = -1;
		mouseUpCoordinates.y = -1;

	};
	tonePlotArea.onmousedown = mouseDown;
	tonePlotArea.onmouseup = mouseUp;
	tonePlotArea.onmouseout = mouseUp;
	
	/*
	 * Global variables from audioProcessing.js
	 * 
	 * var recordedBlob, recordedBlobURL;
	 * var recordedArray, currentAudioWindow;
	 * var recordedSampleRate, recordedDuration;
	 * 
	 */
	 
	// Global settings
	var sgc3_settings = {
		settingsRead: "false",
		recSecs: 3,
		ttsSpeed: 110,
		ttsVariant: "f3",
		shuffleLists: "true",
		register: 249, // Must match Register_249 Id
		wordList: "20 basic tone combinations",
		language: "",
		synthesis_eSpeak: false,
		strict: 1
	};
	
	// Store settings
	function store_SGC3_settings () {
		for (x in sgc3_settings) {
			localStorage[x] = sgc3_settings[x];
		};
	};
	
	function load_SGC3_settings () {
		for (x in sgc3_settings) {
			if (localStorage[x]) sgc3_settings[x] = localStorage[x];
		};
		
		set_mainpageLanguage (sgc3_settings.language);
		setRegister (sgc3_settings.register);
		if (sgc3_settings.settingsRead == "true") hideSelectors();
	};
	
	// Initialize to stored settings
	load_SGC3_settings ();
	
	// Set language (make that selectable)
	if (!sgc3_settings.language) {
		sgc3_settings.language = (userLanguage) ? userLanguage : "EN";
	};
	set_mainpageLanguage (sgc3_settings.language);
	
	// Set TTS
	function getTTSvoice(){
		var selectedVoice;
		if (window.speechSynthesis) {
			var voices = window.speechSynthesis.getVoices();
			if (! voices) voices = window.speechSynthesis.getVoices();
			for (x = 0; x < voices.length; ++x) {
				if (voices[x].lang == "zh-CN") { 
					voiceZH_CN = x;
					selectedVoice = voices[x];
				};
			};
		}
		return selectedVoice;
	};
	
	if (window.speechSynthesis) {
		window.speechSynthesis.onvoiceschanged = function() {
		    getTTSvoice();
		};
	}

	// Set Register
	setRegister (sgc3_settings.register);
	
	// Hide Language and Register when settings page has been opened
	function hideSelectors () {
		var languageElement = document.getElementById('Language');
		var registerElement = document.getElementById('Register');
		languageElement.style.display = 'none' ;
		registerElement.style.display = 'none' ;
	};

	// Set progress bars
	function setProgressBar (id, fraction) {
		var progressBar = document.getElementById(id);
		var progressBarCtx = progressBar.getContext("2d");
		progressBarCtx.clearRect(0, 0, progressBarCtx.canvas.width, progressBarCtx.canvas.height);
		progressBarCtx.fillStyle = "rgb(250,250,250)";
		progressBarCtx.fillRect(0, 0, progressBarCtx.canvas.width, progressBarCtx.canvas.height);
		progressBarCtx.beginPath();
		progressBarCtx.fillStyle = "#008080";
		if (fraction > 0) {
			progressBarCtx.fillRect(0, 0, progressBarCtx.canvas.width*fraction, progressBarCtx.canvas.height);
		} else {
			progressBarCtx.fillRect(progressBarCtx.canvas.width*(1+fraction), 0, progressBarCtx.canvas.width, progressBarCtx.canvas.height);
		};
		progressBarCtx.stroke();
	};
	
	// Replace contents of displayed string
	var write_CurrentString = function () {
		// Store current settings
		store_SGC3_settings ()
		
		// Get texts
		var pinyinText = "-";
		var characterText = "-";
		var translationText = "-";
		exampleURL = "-";
		if( currentWord >= 0 && currentWord < currentWordlist.length ) {
			currentItem = currentWordlist[currentWord];
			
			currentPinyin = currentItem[0];
			pinyinText = currentItem[1]
			characterText = currentItem[2];
			translationText = currentItem[3];
			exampleURL = currentItem[currentItem.length - 1];
		} else {
			if(sgc3_settings.shuffleLists == "true") currentWordlist.shuffle();
			currentPinyin = "";
		};
		document.getElementById('Pinyin').textContent = pinyinText;
		document.getElementById('Character').textContent = characterText;
		document.getElementById('Translation').textContent = translationText;
		
		// Plot tones and set recording time
		var currentRecordingTime = sgc3_settings.recSecs + 1.0*Math.ceil((numSyllables(currentPinyin) - 2)/2);
		
		// Set progress bars
		var fillFraction = currentWord / (currentWordlist.length - 1);
		setProgressBar ("LeftProgress", -1*fillFraction);
		setProgressBar ("RightProgress", fillFraction);
		
		
		//Get tone contour
		initializeDrawingParam ("TonePlot");
		draw_example_pinyin ("TonePlot", currentPinyin);

		// Remove last recording
		clearRecordedData ();

	};
	
	var write_WordlistName = function () {
		document.getElementById('WordlistString').textContent = sgc3_settings.wordList;
		// Always reset the selection
		selectWordlist.selectedIndex = 0;	
	};
	
	// Create the list with wordlists
	add_wordlist_names_to_select();
	
	sgc3_settings.wordList = (sgc3_settings.wordList) ? sgc3_settings.wordList : "20 basic tone combinations";
	get_wordlist (sgc3_settings.wordList);
	if(sgc3_settings.shuffleLists == "true") currentWordlist.shuffle();
	var currentWord = 0;
	var currentItem = currentWordlist[currentWord];
	var currentPinyin = currentItem[0];
	var currentCharacter = currentItem[1];
	var currentString = currentItem[0] + " " + currentItem[1] + " " + currentItem[2];
	write_CurrentString ();
	write_WordlistName();
		
	// Other parameters
	var mediaStream;
	var mediaConstraints = { audio: true, video: false };
	var errorCallback = function(err){console.log("Error: " + err.name);};
	
	// Settings button
	settingsButton.onclick = function () {
		if (localStorage.settingsWindow && settingsWindow) {
			settingsWindow.focus();
		} else {
			if (settingsWindow) settingsWindow.close();
			settingsWindow = window.open('SpeakGoodChinese3_Settings.xml', '_blank');
			localStorage.settingsWindow = "true";
		}
	};
	
	// Play example 
	function meSpeakExample (pinyin ) {
			meSpeak.loadConfig("mespeak/mespeak_config.json"); 
			meSpeak.loadVoice('mespeak/voices/zh.json'); 
			meSpeak.speak(pinyin, {speed: sgc3_settings.ttsSpeed, variant: sgc3_settings.ttsVariant});	
	};
	
	function speakExample (voice, text, pinyin) {
		if (window.speechSynthesis) {
		    var msg = new SpeechSynthesisUtterance();
		    msg.onerror = function (event) {
				speechSynthesis.cancel();
				meSpeakExample (pinyin); 
			};
		    msg.voice = voice;
		    msg.rate = 0.7;
		    msg.text = text;
			speechSynthesis.speak(msg);
		} else {
			meSpeakExample (pinyin); 
		};
	};
	
	example.onclick = function() {
		var voice = getTTSvoice();
		if (exampleURL && exampleURL != "-" && sgc3_settings.synthesis_eSpeak == "false") {
			exampleElement.src = exampleURL;
			exampleElement.onerror = function (event) {
			    currentText = currentWordlist[currentWord][2];
			    speakExample (voice, currentText, currentPinyin)
			};
			exampleElement.play();
		} else if (voiceZH_CN >= 0 && sgc3_settings.synthesis_eSpeak == "false") {
		    currentText = currentWordlist[currentWord][2];
		    speakExample (voice, currentText, currentPinyin)
		} else {
			meSpeakExample (currentPinyin);
		};
	};

	// Previous word 
	previous.onclick = function() {
		--currentWord;
 		if( currentWord < 0 ) {
			currentWord = currentWordlist.length;
			
		};
		write_CurrentString();
	};

	// Next word 
	next.onclick = function() {
		++currentWord;		
		if(currentWord > currentWordlist.length) {
			currentWord = 0;
		};
		write_CurrentString();
	};

	// Previous wordlist
	prevWordlist.onclick = function() {
		--wordlistNumber;
 		if( wordlistNumber < 0 ) {
			wordlistNumber = wordlists.length - 1;
		};
		sgc3_settings.wordList = wordlists[wordlistNumber][0];
		get_wordlist (sgc3_settings.wordList);
		if (sgc3_settings.shuffleLists == "true") currentWordlist.shuffle();
		currentWord = 0;
		
		write_WordlistName();
		write_CurrentString();
	};

	// Next wordlist
	nextWordlist.onclick = function() {
		++wordlistNumber;
 		if( wordlistNumber >= wordlists.length ) {
			wordlistNumber = 0;
		};
		sgc3_settings.wordList = wordlists[wordlistNumber][0];
		get_wordlist (sgc3_settings.wordList);
		if (sgc3_settings.shuffleLists == "true") currentWordlist.shuffle();
		currentWord = 0;
		
		write_WordlistName();
		write_CurrentString();
	};
	
	// select wordlist by name
	selectWordlist.onchange = function() {
		if(selectWordlist.selectedIndex > 0) {
			sgc3_settings.wordList = selectWordlist.options[selectWordlist.selectedIndex].value;
			get_wordlist (sgc3_settings.wordList);
			
			if (sgc3_settings.shuffleLists == "true") currentWordlist.shuffle();
			currentWord = 0;
			
			write_WordlistName();
			write_CurrentString();
		};
	};
	
	// When the call to getUserMEdia is susccessfull
	var successCallback = function(mediaStream){
		
		if(!mediaStream){ 
			console.log("No media stream: " + mediaStream);
		}
		
	    record.disabled = false;
	    record.style.color = "red";
		
		var recordRTC = RecordRTC(mediaStream, {
			recorderType: StereoAudioRecorder // optionally force WebAudio API to record audio
			
		}); 
		recordRTC.mimeType = {audio: 'audio/wav'};
		
		clearRecordedData = function () {
			play.disabled = true;
			play.style.color = "gray";
			recordRTC.clearRecordedData();
		};
		
		// Play recorded sound
		play.onclick = function() {
			play_soundArray (currentAudioWindow, recordedSampleRate);
		};
		
		// Stop
		stopRecording = function() {
			recordRTC.stopRecording(function(audioURL) { 
				recordingLight.style.color = "gray";
				recordedBlobURL = audioURL;
				recordedBlob = recordRTC.getBlob();
				// Do things with Blob!!!
				processAudio (recordedBlob);
			});
		    play.disabled = false;
		    record.disabled = false;
		    record.style.color = "red";
		    play.style.color = "red";
		    recordingLight.style.color = "gray";
		}
		
		// onClick Start
		record.onclick = function() {
			recordRTC.startRecording();
		    play.disabled = true;
		    record.disabled = true;
		    record.style.color = "gray";
		    play.style.color = "gray";
			recordingLight.style.top = "5%";
			recordingLight.style.left = "5%";
			recordingLight.style.fontSize = "15vmin";
		    recordingLight.style.color = "red";
		    
		    // Set Timeout for stop
		    setTimeout(stopRecording, currentRecordingTime * 1000)
		}
	
	};
	
	if (navigator.mediaDevices.getUserMedia) {
		navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);
	} else {
		navigator.webkitGetUserMedia(mediaConstraints, successCallback, errorCallback);
	};
	
	//]]>	
	</script>
</body>
</html>
